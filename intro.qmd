# Examples

This is a new book created from markdown and executable code.

See @knuth84 for additional discussion of literate programming.

```{r}
1 + 1
```

## intro 2

```{=tex}
\colorbox{blue!10}{
  \begin{minipage}[t]{1.0\textwidth}
  \textbf{\textcolor{brown}{Note}}
 Not all functions have (or require) arguments.
  \end{minipage}
}
```
::: {.callout-note appearance="simple"}
This book was originally created using [bookdown](https://bookdown.org) and published at <https://rstudio-education.github.io/hopr/>. This site is a port of the original book source to the [Quarto](https://quarto.org) publishing system in order to provide an example of it's use.
:::

::: callout-tip
## Repetition

If you repeat a number in your index, R will return the corresponding value(s) more than once in your "subset." This code will return the first row of `deck` twice:

``` r
x <- c(1, 2, 3)
x
```
:::

::: callout
## Exercise: Deal a Card

Complete the following code to make a function that returns the first row of a data frame:

``` r
deal <- function(cards) {
   # ?
}
```
:::

::: callout
## Exercise: Shuffle a Deck

Use the preceding ideas to write a `shuffle` function. `shuffle` should take a data frame and return a shuffled copy of the data frame.
:::

::: callout-important
## Never attach

In R's early days, it became popular to use `attach()` on a data set once you had it loaded. Don't do this! `attach` recreates a computing environment similar to those used in other statistics applications like Stata and SPSS, which crossover users liked. However, R is not Stata or SPSS. R is optimized to use the R computing environment, and running `attach()` can cause confusion with some R functions.

What does `attach()` do? On the surface, `attach` saves you typing. If you attach the `deck` data set, you can refer to each of its variables by name; instead of typing `deck$face`, you can just type `face`. But typing isn't bad. It gives you a chance to be explicit, and in computer programming, explicit is good. Attaching a data set creates the possibility that R will confuse two variable names. If this occurs within a function, you're likely to get unusable results and an unhelpful error message to explain what happened.
:::

::: callout-warning
## `=` is an assignment operator

Be careful not to confuse `=` with `==`. `=` does the same thing as `<-`: it assigns a value to an object.
:::

You can compare any two R objects with a logical operator; however, logical operators make the most sense if you compare two objects of the same data type. If you compare objects of different data types, R will use its coercion rules to coerce the objects to the same type before it makes the comparison.

**Exercise: How many Aces?**

::: callout
Extract the `face` column of `deck2` and test whether each value is equal to `ace`. As a challenge, use R to quickly count how many cards are equal to `ace`.
:::

::: {.callout-important caption="Cancelling commands"}
Some R commands may take a long time to run. You can cancel a command once it has begun by pressing ctrl + c. Note that it may also take R a long time to cancel the command.
:::

::: {.callout caption="Exercise: Magic with Numbers"}
## Exercise: Magic with Numbers

That's the basic interface for executing R code in RStudio. Think you have it? If so, try doing these simple tasks. If you execute everything correctly, you should end up with the same number that you started with:

1.  Choose any number and add 2 to it.
2.  Multiply the result by 3.
3.  Subtract 6 from the answer.
4.  Divide what you get by 3.
:::

::: {.callout-note caption="What just happened?"}
1.  To create an R object, choose a name and then use the less-than symbol, `<`, followed by a minus sign, `-`, to save data into it. This combination looks like an arrow, `<-`. R will make an object, give it your name, and store in it whatever follows the arrow. So `a <- 1` stores `1` in an object named `a`.
2.  When you ask R what's in `a`, R tells you on the next line.
3.  You can use your object in new R commands, too. Since `a` previously stored the value of `1`, you're now adding `1` to `2`.
:::

::: callout-important
As you preview your book, chapters will be rendered and updated. However, if you make changes to global options (e.g. `_quarto.yml` or included files) you need to fully re-render your book to have all of the changes reflected. Consequently, you should always fully `quarto render` your book before deploying it, even if you have already previewed changes to some chapters with the preview server.
:::
